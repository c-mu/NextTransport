using PublicTransportBuddy.BusinessLayer; using System; using System.Collections.Generic; using System.IO; using System.Linq; using System.Net; using System.Threading.Tasks; #if WINDOWS_UWP using Windows.Foundation; #else using System.Drawing; #endif  namespace PublicTransportBuddy.ServiceLayer { public sealed class WienerLinienProvider : ITransportationProvider { string apiKey; string realtimeBaseUrl; string staticDataBaseUrl;  public WienerLinienProvider(string apiKey) { this.staticDataBaseUrl = "http://data.wien.gv.at/daten/geo"; this.realtimeBaseUrl = "http://www.wienerlinien.at/ogd_realtime"; this.apiKey = apiKey; }  public string Name { get { return "WienerLinien"; } }  public IEnumerable<Stop> Stops { get; private set; }  public async Task Initialize() { // load stored data var storedVersion = File.Exists("Version.txt") ? File.ReadAllText("Version.txt") : string.Empty;  var onlineVersion = DownloadVersion();  // verify local data is up to date if (!storedVersion.Equals(onlineVersion)) { Stops = ReadStops(await DownloadStopsAsync()); } else { Stops = await ReadStopsAsync(); } }  async Task<string> DownloadVersion() { try { return await Task.Run(async () => { // TODO: what if there's no connectivity? var request = WebRequest.CreateHttp($"{staticDataBaseUrl}/csv/wienerlinien-ogd-version.csv"); var response = await request.GetResponseAsync(); using (var responseStream = response.GetResponseStream()) { using (var reader = new StreamReader(responseStream)) { // getting rid of the headers reader.ReadLine(); return reader.ReadLine().Split(';')[0]; } } }); } catch (Exception) {  throw; } }  async Task<string> DownloadStopsAsync() { try { return await Task.Run( async () => { var request = WebRequest.CreateHttp($"{staticDataBaseUrl}?service=WFS&request=GetFeature&version=1.1.0&typeName=ogdwien:OEFFHALTESTOGD&srsName=EPSG:4326&outputFormat=json"); request.Accept = "application/json"; request.ContentType = "application/json"; using (var response = await request.GetResponseAsync()) { using (var stream = response.GetResponseStream()) { using (var reader = new StreamReader(stream)) { var responseString = await reader.ReadToEndAsync(); File.WriteAllText("Stops.json", responseString); return responseString; } } } });  } catch (WebException w) { throw; } catch (System.Net.Http.HttpRequestException h) { throw; } catch (Exception e) {  throw; } }  async Task<IEnumerable<Stop>> ReadStopsAsync() { return await Task.Run( () => { return ReadStops(File.ReadAllText("Stops.json")); }); }  IEnumerable<Stop> ReadStops(string stopsJsonString) { try { var stopsJson = Newtonsoft.Json.Linq.JObject.Parse(stopsJsonString)["features"]; return stopsJson.Select(f => new Stop { Name = f.Value<string>("HTXT"), Coordinates = f.Value<Point>("coordinates"), Lines = f["HLINIEN"].Values<string>() }); } catch (Exception) {  throw; } }  public IEnumerable<Stop> GetStopsByLocation(Point location) { throw new NotImplementedException(); } } }
